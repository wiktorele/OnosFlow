<script type="text/javascript">
    $(document).ready(function () {
        $("#addCriterion").click(function () {
            let lastCriterion = $("#criteria").find('.criterion:last');
            let id = 0;
            if (lastCriterion.length) {
                id = lastCriterion.data('id')+1;
            }
            $.get("/Flow/CriterionFormPartial?id="+id, function (data) {
                let content = data;
                $("#criteria").append(content);
                $("#criteria").find('.delete-criterion').last().click(function () {
                    $(this).closest('.criterion').remove();
                });
                $("#criteria").find('#selector_criteria_' + id + '__type').change(function () {
                    let value = $(this).val();
                    switch (value) {
                        case 'ETH_TYPE':
                            hideAndShow.call(this, ".value-eth-type");
                            break;
                        case 'ETH_DST':
                            hideAndShow.call(this, ".value-mac");
                            break;
                        case 'ETH_SRC':
                            hideAndShow.call(this, ".value-mac");
                            break;
                        case 'IN_PORT':
                            hideAndShow.call(this, ".value-port");
                            break;
                        case 'IPV4_SRC':
                            hideAndShow.call(this, ".value-ip");
                            break;
                        case 'IPV4_DST':
                            hideAndShow.call(this, ".value-ip");
                            break;
                        case 'IPV6_SRC':
                            hideAndShow.call(this, ".value-ip");
                            break;
                        case 'IPV6_DST':
                            hideAndShow.call(this, ".value-ip");
                            break;
                        case 'IN_PORT':
                            hideAndShow.call(this, ".value-port");
                            break;
                        case 'TCP_SRC':
                            hideAndShow.call(this, ".value-tcp-port");
                            break;
                        case 'TCP_DST':
                            hideAndShow.call(this, ".value-tcp-port");
                            break;
                        case 'UDP_SRC':
                            hideAndShow.call(this, ".value-udp-port");
                            break;
                        case 'UDP_DST':
                            hideAndShow.call(this, ".value-udp-port");
                            break;
                        case 'IP_PROTO':
                            hideAndShow.call(this, ".value-protocol");
                            break;
                        default:
                            console.log('Nieznany typ.');
                            break;
                    }

                });
                $("#criteria").find('#selector_criteria_' + id + '__type').trigger('change');
            });
        });
        $("#addInstruction").click(function () {
            let lastInstruction = $("#instructions").find('.instruction:last');
            let id = 0;
            if (lastInstruction.length) {
                id = lastInstruction.data('id')+1;
            }
            $.get("/Flow/InstructionFormPartial?id="+id, function (data) {
                let content = data;
                $("#instructions").append(content);
                $("#instructions").find('.delete-instruction').last().click(function () {
                    $(this).closest('.instruction').remove();
                });
                $("#instructions").find('#treatment_instructions_' + id + '__type').change(function () {
                    let value = $(this).val();
                    let l2subtypes = ["ETH_DST", "ETH_SRC", "VLAN_ID", "VLAN_PCP"];
                    let l3subtypes = ["IPV4_SRC", "IPV4_DST", "IPV6_SRC", "IPV6_DST"];
                    let l4subtypes = ["TCP_SRC", "TCP_DST", "UDP_SRC", "UDP_DST"];
                    let options = "";
                    switch (value) {
                        case 'OUTPUT':
                            hideAndShowInstr.call(this, ".value-port");
                            break;
                        case 'L2MODIFICATION':
                            $.each(l2subtypes, function (i, subtype) {
                                options += '<option value="' + subtype + '">' + subtype + '</option>'
                            });
                            $('#treatment_instructions_' + id + '__subtype').html(options);
                            hideAndShowInstr.call(this, ".value-subtype");
                            $("#instructions").find('#treatment_instructions_' + id + '__subtype').trigger('change');
                            break;
                        case 'L3MODIFICATION':
                            $.each(l3subtypes, function (i, subtype) {
                                options += '<option value="' + subtype + '">' + subtype + '</option>'
                            });
                            $('#treatment_instructions_' + id + '__subtype').html(options);
                            hideAndShowInstr.call(this, ".value-subtype");
                            $("#instructions").find('#treatment_instructions_' + id + '__subtype').trigger('change');
                            break;
                        case 'L4MODIFICATION':
                            $.each(l4subtypes, function (i, subtype) {
                                options += '<option value="' + subtype + '">' + subtype + '</option>'
                            });
                            $('#treatment_instructions_' + id + '__subtype').html(options);
                            hideAndShowInstr.call(this, ".value-subtype");
                            $("#instructions").find('#treatment_instructions_' + id + '__subtype').trigger('change');
                            break;
                        default:
                            console.log('Nieznany typ.');
                            break;
                    }

                });
                $("#instructions").find('#treatment_instructions_' + id + '__subtype').change(function () {
                    let value = $(this).val();
                    switch (value) {
                        //case 'ETH_TYPE':
                        //    hideAndShowInstrSubtypeSubtype.call(this, ".value-");
                        //    break;
                        case 'ETH_SRC':
                            hideAndShowInstrSubtype.call(this, ".value-mac");
                            break;
                        case 'ETH_DST':
                            hideAndShowInstrSubtype.call(this, ".value-mac");
                            break;
                        case 'VLAN_ID':
                            hideAndShowInstrSubtype.call(this, ".value-vlan-id");
                            break;
                        case 'VLAN_PCP':
                            hideAndShowInstrSubtype.call(this, ".value-vlan-pcp");
                            break;
                        case 'IPV4_SRC':
                            hideAndShowInstrSubtype.call(this, ".value-ip");
                            break;
                        case 'IPV4_DST':
                            hideAndShowInstrSubtype.call(this, ".value-ip");
                            break;
                        case 'IPV6_SRC':
                            hideAndShowInstrSubtype.call(this, ".value-ip");
                            break;
                        case 'IPV6_DST':
                            hideAndShowInstrSubtype.call(this, ".value-ip");
                            break;
                        case 'TCP_SRC':
                            hideAndShowInstrSubtype.call(this, ".value-tcp-port");
                            break;
                        case 'TCP_DST':
                            hideAndShowInstrSubtype.call(this, ".value-tcp-port");
                            break;
                        case 'UDP_SRC':
                            hideAndShowInstrSubtype.call(this, ".value-udp-port");
                            break;
                        case 'UDP_DST':
                            hideAndShowInstrSubtype.call(this, ".value-udp-port");
                            break;
                        default:
                            console.log('Nieznany typ.');
                            break;
                    }

                });
                $("#instructions").find('#treatment_instructions_' + id + '__type').trigger('change');
            });
        });
    });

    function hideAndShow(attr) {
        $(this).siblings('.criterion-value').each(function () {
            $(this).addClass('d-none');
            $(this).find(':input').prop("disabled", true);
        });
        $(this).siblings(attr).removeClass('d-none');
        $(this).siblings(attr).find(':input').prop("disabled", false);
    }

    function hideAndShowInstr(attr) {
        $(this).siblings('.instruction-value').each(function () {
            $(this).addClass('d-none');
            $(this).find(':input').prop("disabled", true);
        });
        $(this).siblings(attr).removeClass('d-none');
        $(this).siblings(attr).find(':input').prop("disabled", false);
    }

    function hideAndShowInstrSubtype(attr) {
        $(this).parent().siblings('.instruction-value').each(function () {
            $(this).addClass('d-none');
            $(this).find(':input').prop("disabled", true);
        });
        $(this).parent().siblings(attr).removeClass('d-none');
        $(this).parent().siblings(attr).find(':input').prop("disabled", false);
    }
</script>